c <- s^2 + t^2
cat("The Pythagorean triple is: ",a,b,c,"\n")
pythag <- function(x){
s <- x[1]pythag(1,2)
t <- x[2]
a <- t^2 - s^2
b <- 2 * s * t
c <- s^2 + t^2
cat("The Pythagorean triple is: ",a,b,c,"\n")
}
pythag <- function(x){
s <- x[1]pythag(1,2)
t <- x[2]
a <- t^2 - s^2
b <- 2 * s * t
c <- s^2 + t^2
cat("The Pythagorean triple is: ",a,b,c,"\n")
pythag(c(2,3))
input <- scan()
pythag(input)
pythag <- function(x){
s <- x[1]pythag(1,2)
t <- x[2]
a <- t^2 - s^2
b <- 2 * s * t
c <- s^2 + t^2
cat("The Pythagorean triple is: ",a,b,c,"\n")
pythag(input)
pythag <- function(x){
s <- x[1]pythag(1,2)
t <- x[2]
a <- t^2 - s^2
b <- 2 * s * t
c <- s^2 + t^2
cat("The Pythagorean triple is: ",a,b,c,"\n")
}
quadratic <- function(coeff){
a <- coeff[1]
b <- coeff[2]
c <- coeff[3]
d <- b^2 - (4*a*c)
cat("The discriminant is: ", d, "\n")
if(d < 0) cat("There are no real roots. ", "\n")
if(d >= 0){
root1 <- (-b+sqrt(d))/(2*a)
root2 <- (-b-sqrt(d))/(2*a)
cat("root1: ",root1,"\n")
cat("root2: ",root2,"\n")
}
}
quadratic(c(2,-1,-8))
info <- list(name = "Ray", gender = "Male", age = 52, salary = 38500)
class(info)
class(info) <- "member"
names()
$names
info <- list(name = "Ray", gender = "Male", age = 52, salary = 38500)
class(info) <- "member"
attributes(info)
rm(list=ls())
info <- list(name = "Ray", gender = "Male", age = 52, salary = 38500)
class(info) <- "member"
attributes(info)
info
print.member <- function(person){
cat(person$name, "\n")
cat("gender",person$sex, "\n")
cat("age",person$age, "\n")
cat("salary",person$salary, "\n")
}
info
print.member <- function(person){
cat(person$name, "\n")
cat("gender",person$gender, "\n")
cat("age",person$age, "\n")
cat("salary",person$salary, "\n")
}
info
setClass("member",
representation (
name = "character" ,
sex = "character" ,
age = "numberic" ,
salary = "numberic"
)
)
setClass("member",
representation (
name = "character" ,
gender = "character" ,
age = "numberic" ,
salary = "numberic"
)
)
setClass("member",
representation (
name = "character" ,
gender = "character" ,
age = "numberic" ,
salary = "numberic"
)
)
info <- list(name = "Ray", gender = "Male", age = 52, salary = 38500)
class(info) <- "member"
attributes(info)
info
print.member <- function(person){
cat(person$name, "\n")
cat("gender",person$gender, "\n")
cat("age",person$age, "\n")
cat("salary",person$salary, "\n")
}
info
attributes(info)
info
rm(list=ls())
info <- list(name = "Ray", gender = "Male", age = 52, salary = 38500)
class(info) <- "member"
attributes(info)
info
print.member <- function(person){
cat(person$name, "\n")
cat("gender",person$gender, "\n")
cat("age",person$age, "\n")
cat("salary",person$salary, "\n")
}
info
setClass("member",
representation (
name = "character" ,
gender = "character" ,
age = "numberic" ,
salary = "numberic"
)
)
setClass("member",
representation (
name = "character" ,
gender = "character" ,
age = "numberic" ,
salary = "numberic"
)
)
setClass("member",
representation (
name = "character" ,
gender = "character" ,
age = "numberic" ,
salary = "numberic"
)
)
rm(list=ls())
info <- list(name = "Ray", gender = "Male", age = 52, salary = 38500)
class(info) <- "member"
attributes(info)
setClass("member",
representation (
name = "character" ,
gender = "character" ,
age = "numberic" ,
salary = "numberic"
)
)
rm(list=ls())
info <- list(name = "Ray", gender = "Male", age = 52, salary = 38500)
class(info) <- "member"
attributes(info)
print.member <- function(person){
cat(person$name, "\n")
cat("gender",person$sex, "\n")
cat("age",person$age, "\n")
cat("salary",person$salary, "\n")
}
info
setClass("member",
representation (
name = "character" ,
sex = "character" ,
age = "numberic" ,
salary = "numberic"
)
)
setClass("member",
representation (
name = "character" ,
sex = "character" ,
age = "numeric" ,
salary = "numeric"
)
)
ray <- new("member",name="Ray", sex="Male", age=52, salary =38500)
ray
attach(dataset)
MeanAbsDev <- function(x){
AbsDev <- abs(x - mean(x)) # x-평균의 절대값
MAD <- mean (AbsDev)
cat("The mean absolute deviation is : ",MAD,"\n")
}
MeanAbsDev(Age)
MeanAbsDev <- function(x){
AbsDev <- abs(x - mean(x)) # x-평균의 절대값
MAD <- mean (AbsDev)
cat("The mean absolute deviation is : ",MAD,"\n")
}
zcrit <- c(1.96,1.96,1.96,1.96,1.96,1.96,1.96,1.96,1.96,1.96)
df <- (1,4,9,29,49,99,199,499,999,9999)
df <- c(1,4,9,29,49,99,199,499,999,9999)
tcrit <- c(12.706205,2.776445,2.262157,2.045230,2.009575,1.984217,1.971957,1.964729,1.962341,1.960201)
cbind(zcrit,df,trcit)
cbind(zcrit,df,tcrit)
confint <-function(x, alpha = .05){
conflevel = (1 - alpha) * 100 #신뢰구간 = (1 - alpha) * 100
stderr <- sd(x) / sqrt(length(x)) #표준오차
tcrit <- qt(1 - alpha/2, length(x) - 1) # 주어진 확률의 t값을 구함
margin <- stderr * tcrit #오차한계
lower <- mean(x) - margin
upper <- mean(x) - margin
cat(conflevel,"Percent confidence Interval", "\n")
cat("Mean:", mean(x) , "Std. Error:", stderr,"\n")
cat("Lower Limit:", lower, "\n")
cat("Upper Limit:", upper, "\n")
}
confint(tcrit)
rm(list=ls())
TryIt <- function(x){
flush.console()
for(n in x){
result <- n^2 - n + 41
cat("For x =", "n", "Result is", result, "\n")
}
}
TryIt(0)
TryIt(0)
TryIt(1)
TryIt(2)
TryIt(3)
TryIt(4)
TryIt(5)
TryIt(6)
TryIt(7)
TryIt(8)
TryIt(9)
TryIt(10)
rm(list=ls())
x <- 0:50
y <- x^2 - x + 41
y
ifelse(1>0,"y",n)
ifelse(-1>0,"y",n)
x
x <- -5:5
x
sqrt(x)
x <- -5:5
x
sqrt(x)
sqrt(ifelse(x >=0 , x, NA))
primes
rm(list=ls())
primality <- function(x){
stopinfot (x >= 2)
limit <- trunc(sqrt(x) + 1)
testvec <- 2:limit
results <- x %% testvec
check <- any(results == 0)
outcome <- "Yes."
if(check == TRUE) outcome <- "No."
if(x == 2) outcome <- "Yes."
cat("Is",x,"prime?",outcome,"\n")
}
primality(2)
primality <- function(x){
stopifnot (x >= 2)
limit <- trunc(sqrt(x) + 1)
testvec <- 2:limit
results <- x %% testvec
check <- any(results == 0)
outcome <- "Yes."
if(check == TRUE) outcome <- "No."
if(x == 2) outcome <- "Yes."
cat("Is",x,"prime?",outcome,"\n")
}
primality(2)
primality(3)
primality(4)
primality(5)
primality(6)
primality(7)
primality(8)
primality(9)
primality(10)
primality(1681)
primality(2491)
primality(163)
primality(197)
primality(449)
primality(457)
rm(list=ls())
testvector <- 2:50
x <- 2491
limit <- trunc(sqrt(x) + 1)
limit
testvector <- 2:50
testvector
x %% testvector
2491 / 47
any(x %% testvector == 0)
which(testvector == 10)
which(x%%testvector == 10)
which((x %% testvector) == 10)
which(x == 10)
t.test
confint <-function(x, alpha = .05){
conflevel = (1 - alpha) * 100 #신뢰구간 = (1 - alpha) * 100
stderr <- sd(x) / sqrt(length(x)) #표준오차
tcrit <- qt(1 - alpha/2, length(x) - 1) # 주어진 확률의 t값을 구함
margin <- stderr * tcrit #오차한계
lower <- mean(x) - margin
upper <- mean(x) - margin
cat(conflevel,"Percent confidence Interval", "\n")
cat("Mean:", mean(x) , "Std. Error:", stderr,"\n")
cat("Lower Limit:", lower, "\n")
cat("Upper Limit:", upper, "\n")
}
weights <- c(169.1, 144.2, 179.3, 152.6, 166.8,
135.0, 201.5, 175.2, 139.0, 156.3,
186.6, 191.1, 151.3, 209.4, 237.1,
176.7, 220.6, 166.1, 137.4, 164.2,
137.4, 164.2, 162.4, 151.8, 144.1,
204.6, 193.8, 172.9, 161.9, 174.8,
169.8, 213.3, 198.0, 173.3, 214.5,
137.1, 119.5, 189.1, 164.7, 170.1)
confint(weights)
confint <-function(x, alpha = .05){
conflevel = (1 - alpha) * 100 #신뢰구간 = (1 - alpha) * 100
stderr <- sd(x) / sqrt(length(x)) #표준오차
tcrit <- qt(1 - alpha/2, length(x) - 1) # 주어진 확률의 t값을 구함
margin <- stderr * tcrit #오차한계
lower <- mean(x) - margin
upper <- mean(x) + margin
cat(conflevel,"Percent confidence Interval", "\n")
cat("Mean:", mean(x) , "Std. Error:", stderr,"\n")
cat("Lower Limit:", lower, "\n")
cat("Upper Limit:", upper, "\n")
}
confint(weights)
t.test(weights, mu = 191, conf.level = .10)
load("~/dev/workspace/RProgramming/R Source/Beginning R Data/percapita.rda")
attach(percapita)
quantile(yr_2010)
summary(percapita[2:9])
colMeans((percapita[2:9]))
attach(percapita)
attach(percapita)
mean(Yr_2010)
median(Yr_2010)
mean(Yr_2010,trim = .5)
apply(percapita[2:9],2,median) # 열을 중심으로 중앙값을 출력
quantile(Yr_2010, 0.90)
sort(table(Yr_2010))
require(prettyR)
install.packages("prettyR")
require(prettyR)
Mode(Yr_2010)
zYr_2010 <- scale(Yr_2010)
zYr_2010
mean(zYr_2010)
apply(zYr_2010,2,sd)
var(Yr_2010)
load("~/dev/workspace/RProgramming/R Source/Beginning R Data/percapita.rda")
attach(percapita)
var(Yr_2010)
var(percapita[2:9])
range(weights)
range.diff
range.diff <- function max(x) - min(x)
range.diff <- function(x) max(x) - min(x)
range.diff <- function(x) max(x) - min(x)
range.diff(weights)
mad(weights)
mad(weights, center = mean(weights))
hist(weights)
IQR(weights)
CV <- function(x) sd(x)/mean(x)
CV
CV(weights)
cov(Advertising, Sales) #양의 상관성이 있다.
load("~/dev/workspace/RProgramming/R Source/Beginning R Data/sales.rda")
cov(Advertising, Sales) #양의 상관성이 있다.
cov(Advertising, sales) #양의 상관성이 있다.
cov(Advertising, sales) / (sd(Advertising) * sd(sales))
load("~/dev/workspace/RProgramming/R Source/Beginning R Data/Mileage.rda")
head(Mileage)
install.packages("psych")
require(psych)
skew(City)
load("~/dev/workspace/RProgramming/R Source/Beginning R Data/faithful.rda")
head(faithful)
ls()
waiting <- faithful[,2]
range(waiting)
table(waiting)
breaks <- seq(40, 100, by = 5)
breaks
wait_time <- cut(waiting, breaks, right = FALSE) #오른쪽을 열어두지 않으면 값이 섞인다
RProgramming
wait_time
cbind(table(wait_time))
load("~/dev/workspace/RProgramming/R Source/Beginning R Data/dataset.rda")
attach(dataset)
table(Sex,Age)
head(grades)
load("~/dev/workspace/RProgramming/R Source/Beginning R Data/grades.rda")
head(grades)
load("~/dev/workspace/RProgramming/R Source/Beginning R Data/Car_Colors.rda")
Car_Colors <- data.frame(Color =factor(), Percent = numeric())
Car_Colors <- edit(Car_Colors)
Car_Colors <- data.frame(Color =factor(), Percent = numeric())
Car_Colors <- edit(Car_Colors)
install.packages("X11")
Car_Colors
Car_Colors <- data.frame(Color =factor(), Percent = numeric())
Car_Colors <- edit(Car_Colors)
Car_Colors
attach(Car_Colors)
pie(Percent)
attach(Car_Colors)
pie(Percent)
colors
pie(Percent, col = colors())
names(Percent) <- c("Silver","Black","White","Gray","Red","Blue","Brown","Green","Other")
attach(grades)
barplot(table(Grade), col = c("red","green","blue"),main = "Grade Level")
boxplot(Age, Main = "Boxplot for Age")
load("~/dev/workspace/RProgramming/R Source/Beginning R Data/quizzes.rda")
quizzes
boxplot(quizzes, Main = "Boxplot for quizzes")
attach(faithful)
load("~/dev/workspace/RProgramming/R Source/Beginning R Data/faithful.rda")
attach(faithful)
hist(waiting)
load("~/dev/workspace/RProgramming/R Source/Beginning R Data/Min_Wage.rda")
attach(Min_Wage)
Min_Wage
attach(Min_Wage)
Min_Wage
plot(Value, type = "o", xlab = "Year", col = "blue", main = "Minimum Wage")
plot(Year, Value, type = "o")
help(plot)
plot(Hours, GPA)
attach(GPA)
GPA
Hours
#하나의 결과는 유일하며(다른결과로 대체 불가) 상호 베타적이다(하나의 결과는 하나의 범주에만 속한다.)
load("~/dev/workspace/RProgramming/R Source/Beginning R Data/saturday_sales.rda")
mu <- sum(numsold * prob)
attach(saturday_sales)
mu <- sum(numsold * prob)
mu
variance <- sum((numsold - mu)^2 * prob)
variance
cbind(dbinom(x, size = 5, prob = .5))# size는 시행 수를 의미하고, prob는 확률을 의미한다.
choose(5, 0.5)
choose(5, 1)
choose(5, 6)
choose(5, 0)
choose(5, 5)
choose(5, 0)
choose(5, 0) #정상적으로 작동하지 않는다.
choose(5, 1)
choose(5, 2)
choose(5, 3)
choose(5, 4)
choose(5, 5)
choose(5, 0) * (0.5) ^ 0 * (0.5) ^ 5
choose(5, 1) * (0.5) ^ 1 * (0.5) ^ 4
choose(5, 2) * (0.5) ^ 2 * (0.5) ^ 3
choose(5, 3) * (0.5) ^ 3 * (0.5) ^ 2
choose(5, 4) * (0.5) ^ 4 * (0.5) ^ 1
choose(5, 5) * (0.5) ^ 5 * (0.5) ^ 0
cbind(dbinom(x, size = 5, prob = .5))# size는 시행 수를 의미하고, prob는 확률을 의미한다.
dbinom(8, size = 10, prob = .76)
x < - c(
choose(5, 0) * (0.5) ^ 0 * (0.5) ^ 5
,choose(5, 1) * (0.5) ^ 1 * (0.5) ^ 4
,choose(5, 2) * (0.5) ^ 2 * (0.5) ^ 3
,choose(5, 3) * (0.5) ^ 3 * (0.5) ^ 2
,choose(5, 4) * (0.5) ^ 4 * (0.5) ^ 1
,choose(5, 5) * (0.5) ^ 5 * (0.5) ^ 0
)
choose(5, 0) * (0.5) ^ 0 * (0.5) ^ 5
x < - c(
choose(5, 0) * (0.5) ^ 0 * (0.5) ^ 5
,choose(5, 1) * (0.5) ^ 1 * (0.5) ^ 4
,choose(5, 2) * (0.5) ^ 2 * (0.5) ^ 3
,choose(5, 3) * (0.5) ^ 3 * (0.5) ^ 2
,choose(5, 4) * (0.5) ^ 4 * (0.5) ^ 1
,choose(5, 5) * (0.5) ^ 5 * (0.5) ^ 0
)
cbind(dbinom(x, size = 5, prob = .5))# size는 시행 수를 의미하고, prob는 확률을 의미한다.
x <- seq(0:5)
cbind(dbinom(x, size = 5, prob = .5))# size는 시행 수를 의미하고, prob는 확률을 의미한다.
x <- seq(-1:5)
cbind(dbinom(x, size = 5, prob = .5))# size는 시행 수를 의미하고, prob는 확률을 의미한다.
x <- seq(0:5)
x <- seq(0:4)
cbind(dbinom(x, size = 5, prob = .5))# size는 시행 수를 의미하고, prob는 확률을 의미한다.
x <- c(0,1,2,3,4,5)
cbind(dbinom(x, size = 5, prob = .5))# size는 시행 수를 의미하고, prob는 확률을 의미한다.
xvec <- 0:6
sum(dbinom(xvec, size = 10, prob = .76))
help("dbinom")
